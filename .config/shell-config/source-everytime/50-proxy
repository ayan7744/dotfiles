#!/bin/fish
# vim: ft=sh

function proxyctl
    function set_proxy 
        [ "$IS_PROXY_ON" = "1" ] && [ "$http_proxy" = "$argv[1]" ] && return 0
        [ "$IS_PROXY_ON" = "1" ] && unset_proxy
        set -Ux http_proxy $argv[1]
        set -Ux HTTP_PROXY $http_proxy
        set -Ux https_proxy $http_proxy
        set -Ux HTTPS_PROXY $http_proxy
        set -Ux ftp_proxy $http_proxy
        set -Ux FTP_PROXY $http_proxy
        set -Ux rsync_proxy $http_proxy
        set -Ux RSYNC_PROXY $http_proxy
        set -Ux all_proxy $http_proxy
        set -Ux IS_PROXY_ON 1
        # set -Ux no_proxy "localhost,127.0.0.1,localaddress,.localdomain.com"
    end

    function unset_proxy
        [ "$IS_PROXY_ON" = "0" ] && return 0
        set -e http_proxy
        set -e HTTP_PROXY 
        set -e https_proxy 
        set -e HTTPS_PROXY
        set -e ftp_proxy 
        set -e FTP_PROXY
        set -e rsync_proxy
        set -e RSYNC_PROXY 
        set -e all_proxy
        set -e IS_PROXY_ON
        set -Ux IS_PROXY_ON 0
        # set -e no_proxy 
    end

    function proxy_status
        env | /bin/grep -i "proxy"
    end

    function auto_proxy
        set connectedWifi (nmcli -t -f NAME connection show --active)
        set proxyDomain (/bin/cat $XDG_CONFIG_HOME/proxy.cfg | head -1)
        if [ "$connectedWifi" = "TUFi" ]
            set_proxy "$proxyDomain"
        else
            unset_proxy
        end
    end
        
    function toggle
        if [ "$IS_PROXY_ON" = "0" ]
            set_proxy
        else if [ "$IS_PROXY_ON" = "1" ] 
            unset_proxy
        else 
            echo "Proxy indicator environment variable absent."
            set_proxy
        end
    end

    switch $argv[1]
        case "--set"
            set_proxy
        case "--unset"
            unset_proxy
        case "--status"
            proxy_status
        case "--toggle"
            toggle
        case "--auto"
            auto_proxy
        case '*'
            exit 0
    end
end

proxyctl --auto
